#obj/handlers/nroff.c
nroffed_file ({0,2,20,"Reagent Base Objects","Discworld Creator Help","Reagent Base Objects","Name",3,5,5,"reaction, monster_morph - Base objects for the reaction handler ","Description",3,5,5,"The reaction handler mainly uses objects based on /obj/cont_medium. In order to make reactions more flexible, customizable, and just downright interesting, various special base objects have been (and will continue to be) written.  These objects can be used as the base for virtual objects, or inherited to create even more specialized objects.  The \"standard\" ones reside in /obj/reagents and are described below.  Most of these are a class of cont_medium called transients. ","Reaction (/obj/reagents/reaction.c)",3,5,5,"This is the base transient object.  It exists for a specified amount of time, printing out messages to the player(s) at regular intervals. When it expires, it can either explode or change into another object. Many of the parameters are specified directly in the reaction handler's database. ","",7,5,"Functions","",7,10,"void set_progress_msg( mixed *msg )",7,10,"void add_progress_msg( mixed *msg )",7,10,"void query_progress_msg( )",3,15,5,"These functions manipulate the set of progress messages.  Each \"message\" is printed at equal intervals over the duration of the object.  That is, if there are n messages, the duration is divided into n intervals. query_progress_msg() simply prints the progress message array to the screen. ","",3,15,5,"The term \"message\" is something of a misnomer.  Each \"message\" is actually a printed message and an array of process_string-type strings (but without the \"@@\" around them - they're added automatically). This allows things such as the description of the object to be changed as the reaction progresses (see \"Pseudo-objects\" below). ","",7,10,"void set_duration( int time )",3,15,5,"This sets the total duration of the object.  Note that the interval time is calculated here also, so this should be called after set_progress_msg() (although add_progress_msg() recalculates the interval, so messages may be added afterwards). ","",7,10,"void set_final( string s )",3,15,5,"This sets the function that should be called when the object expires. The final function either creates a new object in the transient's place, or causes some interesting effect to occur.  Two functions are defined: \"boom\" and \"morph\" (see below). ","",7,10,"void set_result( string s )",3,15,5,"This sets the path of the object that is created when the transient expires.  If the final function doesn't create a result object, this need not be called. ","",7,10,"void set_result_alias( string s )",3,15,5,"This specifies the medium alias for the result.  If there is no result, or if the result is not continuous, this need not be called. ","",7,10,"void set_result_amt( int amt )",3,15,5,"This specifies the amount of the result to be created.  If the result is continuous, this is the continuous amount.  Otherwise, it is divided by AMT_PER_WGT (currently 200) and used as the weight of the result.  Note a slight inconsistency here: if the reaction handler creates a non-continuous object directly, it uses the \"result_amount\" field as the weight directly.  There was a reason for that, but for the life of me I can't think what it was. ","",7,10,"void set_hp_base( int hp )",3,15,5,"This specifies a base hp value (per amount) for reactions that cause damage.  See the \"boom\" final function for an example. ","",7,10,"void start_reaction( )",3,15,5,"This is the function that gets the transient going.  It's usually called by the reaction handler. ","",7,10,"void boom( )",3,15,5,"This is a final function.  The purpose is to cause damage (such as when a potion is mixed improperly and explodes).  The damage done depends on where the transient is.  If it's being held by a player, the player gets full damage.  If it's in a container held by a player, the container is dested, all contents are moved up to the next viable container, and the player receives 1/2 damage.  If the transient is sitting in a room, everyone gets 1/2 damage.  If it's in a container in a room, everyone gets 1/5 damage and the container is dested as above.  The function will also produce a result object if it has been specified, placing it in the environment of the (now destroyed) container. ","",7,10,"void morph( )",3,15,5,"This final function can be used for generic object creation.  It creates the result object and, if the container can handle it, puts it in place of the transient.  Otherwise, it destroys the container and its contents.  This function is great for adding a little pizazz to a reaction, rather than just quietly creating the new object.  It's also good for adding delays, introducing temporary state changes, etc. ","",7,5,"Pseudo-objects",3,10,5,"To make customization easier, certain strings can be used in the function call part of the progress messages to represent various objects. ",6,({15,25,-20,}),({"","","","",}),({"#obj#","#env#","#env2#","#result#",}),({"represents the transient itself","represents the environment of the transient","represents the environment of the environment of the transient","represents the result object (obviously, this can only be used in the final progress message)",}),"Monster_morph (/obj/reagents/monster_morph.c)",3,5,5,"This is another transient, specifically for creating monsters.  It inherits reaction.c, so the above functions are still valid, although a number of new ones have been added specifically for setting NPC attributes. ","",7,5,"Functions","",7,10,"void set_relevant_skill( string s )","",3,15,5,"This sets the skill to be used in determining the monster's level (see set_result_level() below). ","",7,10,"void set_result_name( string rname )void set_result_short( string rshort )void set_result_long( string rlong )void set_result_race( string rrace )void set_result_al( string ral )void set_result_class( string rclass )void set_result_gender( int rgender )void set_result_level( int rlevel, float scale )void set_result_max_hp( int rmax_hp )void set_result_weight( int rweight )",3,15,5,"These functions set the respective attributes of the created monster. If the supplied value is 0, the attribute is not modified. The supplied value is used directly, except for set_result_level().  In this case, the level is the supplied value (rlevel) times the amount of the transient, times the skill bonus of the player (see set_relevant_skill() above), times the scale.  Note that the scale is a floating point value, so it should have a good dynamic range. ","",7,10,"void monster_morph()",3,15,5,"This is the final function for the transient.  It clones the monster, sets the attributes as given, and moves the monster to the room of the container (no matter how deep down the container is). ","",7,10,"Pseudo-objects",3,15,5,"In addition to the pseudo-objects available in reaction.c, the following can be used: ",6,({15,25,-20,}),({"",}),({"#room#",}),({"Represents the room enclosing the transient (i.e., where the monster will be placed)",}),"See also",7,5,"obj.handlers.reaction_handler, obj.reactions","",})
nroffed_file_name "/doc/create/obj.reagents"
modified_time 810268278
